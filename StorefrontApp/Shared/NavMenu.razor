@using StorefrontApp.Services
@inject ICartService cartService
@implements IDisposable

<nav style="height: 2rem" class="navbar navbar-expand-sm navcolor sticky-top">
    <div class="container-fluid p-0">
        <a class="navbar-brand" href="#">InterStellar Gaming</a>
        <NavLink class="brand-neighbor" style="color: white;" href="/login" Match="NavLinkMatch.All">Login/Sign Up</NavLink>
        <button class="navbar-toggler custom-toggler" type="button" data-toggle="collapse" data-target="#navbarContent" aria-controls="navbarContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon custom-toggler"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarContent">
            <div class="navbar-nav ml-auto">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="fas fa-home" aria-hidden="true"></span> Home
                </NavLink>
                <NavLink class="nav-link" href="/store" Match="NavLinkMatch.All">
                    <span class="fas fa-store" aria-hidden="true"></span> Store
                </NavLink>
                <NavLink class="nav-link" href="/shoppingcart" Match="NavLinkMatch.All">
                    <span class="fas fa-shopping-cart" aria-hidden="true"></span> Shopping Cart @cartService.Total.ToString("C2")
                </NavLink>
                <NavLink class="nav-link" href="/about" Match="NavLinkMatch.All">
                    <span class="fas fa-info" aria-hidden="true"></span> About
                </NavLink>
            </div>
        </div>
    </div>
</nav>

@code {
    protected override void OnInitialized()
    {
        cartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        cartService.OnChange -= StateHasChanged;
    }
}

